/**
 * # Parameters for nf-maccoss-trex
 *
 * A NextFlow pipeline for analyzing data-ind
 */
params {
    /** \group{Input/Output Parameters} */

    /** \type{string} \required
     *  Path to the FASTA file containing the subset of proteins sequences to
     *  search.
     */
    fasta = null

    /** \type{string} \required
     *  The directory containing the mzML or raw files to search
     */
    spectra_dir = null
    
    result_dir = 'results/nf-filter-fasta' /** \type{str} Where results will be saved. */
    report_dir = 'reports/nf-filter-fasta' /** \type{str} Where results will be saved. */
    email = null           /** \type{str} An email to alert on completion. */

    // default filters for which proteins to include in filtered FASTA file
    psm_qvalue_filter = 0.01        // exclude PSMs with q-value > this value
    peptide_qvalue_filter = 0.01    // exclude peptides with q_value > this value
    distinct_peptide_count = 3      // exclude proteins with # distinct peptides < value
    decoy_prefix = 'DEBRUIJN'       // the string prefix used to label decoys
    
    // where to cache mzml files after running msconvert
    mzml_cache_directory = '/data/mass_spec/nextflow/nf-filter-fasta/mzml_cache'

    // where to cache raw files pulled from panoramaweb
    panorama_cache_directory = '/data/mass_spec/nextflow/panorama/raw_cache'

}

plugins {
    id 'nf-amazon'
}

docker {
    enabled = true
}

/*
 * Set up secrets in the environment. 
 * Need to do it this way because Nextflow doesn't allow the use of secrets when running on AWS Batch
 */

//env.KEY1 = "myenvvar"
env.KEY2 = "apikey\\|blah"


//panorama_secret = nextflow.secret.SecretsLoader.instance.load().getSecret("PANORAMA_API_KEY")
//panorama_key = panorama_secret.value.replace("\\", "")
//env.PANORAMA_API_KEY = panorama_key     // this step is failing because of an unescaped | in the value... thinking I should be storing this key without the |

// Execution Profiles
profiles {

    /*
     * Params for running pipeline on the local computer (e.g.:
     * your laptop). These can be overridden in the local config file.
     */
    standard {
        process.executor = 'local'

        // limit nextflow to running 1 task at a time
        executor.queueSize = 1

        params.max_memory = '12.GB'
        params.max_cpus = 8
        params.max_time = '240.h'

    }

}

// Manifest
manifest {
    name            = 'nf-filter-fasta'
    author          = 'Michael Riffle'
    homePage        = 'https://github.com/mriffle/nf-filter-fasta'
    description     = 'Workflow for filtering FASTA file based on search results'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.report_dir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.report_dir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.report_dir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = false
    file    = "${params.report_dir}/pipeline_dag_${trace_timestamp}.html"
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit. Copied from the nf-core template.
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
